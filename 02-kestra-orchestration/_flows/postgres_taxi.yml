id: postgres_taxi
namespace: zoomcamp

inputs:
  - id: taxi
    type: SELECT
    displayName: select a taxi type
    values: ['green', 'yellow']
    defaults: 'green'
  
  - id: year
    type: SELECT
    displayName: select a year
    values: ['2019', '2020']
    defaults: '2019'

  - id: month
    type: SELECT
    displayName: select a month
    values: ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']
    defaults: '01'

variables:
  file: "{{inputs.taxi}}_tripdata_{{inputs.year}}-{{inputs.month}}.csv"
  staging_table: "public.{{inputs.taxi}}_tripdata_staging"
  table: "public.{{inputs.taxi}}_tripdata"
  data: "{{outputs.extract.outputFiles[inputs.taxi ~ '_tripdata_' ~ inputs.year ~ '-' ~ inputs.month ~ '.csv']}}"

tasks:
  - id: set_tag
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"
      taxi: "{{inputs.taxi}}"
  
  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget -qO - https://www.github.com/DataTalksClub/nyc-tlc-data/releases/download/{{inputs.taxi}}/{{render(vars.file)}}.gz | gunzip > {{render(vars.file)}}
      
  - id: green_create_table
    type: io.kestra.plugin.jdbc.postgresql.Queries
    sql: |
      CREATE TABLE IF NOT EXISTS {{render(vars.table)}} (
        unique_row_id TEXT,
        filename TEXT,
        VendorID TEXT,
        lpep_pickup_datetime TIMESTAMP,
        lpep_dropoff_datetime TIMESTAMP,
        store_and_fwd_flag CHAR,
        RateCodeID TEXT,
        PULocationID TEXT,
        DOLocationID TEXT,
        passenger_count INTEGER,
        trip_distance DOUBLE PRECISION,
        fare_amount DOUBLE PRECISION,
        extra DOUBLE PRECISION,
        mta_tax DOUBLE PRECISION,
        tip_amount DOUBLE PRECISION,
        tolls_amount DOUBLE PRECISION,
        ehail_fee DOUBLE PRECISION,
        improvement_surcharge DOUBLE PRECISION,
        total_amount DOUBLE PRECISION,
        payment_type INTEGER,
        trip_type INTEGER,
        congestion_surcharge DOUBLE PRECISION
      );

  - id: green_create_staging_table
    type: io.kestra.plugin.jdbc.postgresql.Queries
    sql: |
      CREATE TABLE IF NOT EXISTS {{render(vars.staging_table)}} (
        unique_row_id TEXT,
        filename TEXT,
        VendorID TEXT,
        lpep_pickup_datetime TIMESTAMP,
        lpep_dropoff_datetime TIMESTAMP,
        store_and_fwd_flag CHAR,
        RateCodeID TEXT,
        PULocationID TEXT,
        DOLocationID TEXT,
        passenger_count INTEGER,
        trip_distance DOUBLE PRECISION,
        fare_amount DOUBLE PRECISION,
        extra DOUBLE PRECISION,
        mta_tax DOUBLE PRECISION,
        tip_amount DOUBLE PRECISION,
        tolls_amount DOUBLE PRECISION,
        ehail_fee DOUBLE PRECISION,
        improvement_surcharge DOUBLE PRECISION,
        total_amount DOUBLE PRECISION,
        payment_type INTEGER,
        trip_type INTEGER,
        congestion_surcharge DOUBLE PRECISION
      );

  - id: green_truncate_staging_table
    type: io.kestra.plugin.jdbc.postgresql.Queries
    sql: |
      TRUNCATE {{render(vars.staging_table)}}

  - id: green_copy_into_staging_table
    type: io.kestra.plugin.jdbc.postgresql.CopyIn
    format: CSV
    from: "{{render(vars.data)}}"
    table: "{{render(vars.staging_table)}}"
    header: true
    columns: [VendorID, lpep_pickup_datetime, lpep_dropoff_datetime, store_and_fwd_flag, RateCodeID, PULocationID, DOLocationID, passenger_count, trip_distance, fare_amount, extra, mta_tax, tip_amount, tolls_amount, ehail_fee, improvement_surcharge, total_amount, payment_type, trip_type, congestion_surcharge]

  - id: green_create_unique_row_id_and_filename
    type: io.kestra.plugin.jdbc.postgresql.Queries
    sql: |
      UPDATE {{render(vars.staging_table)}}
      SET
        unique_row_id = md5(
          COALESCE(VendorID, '') ||
          COALESCE(CAST(lpep_pickup_datetime AS TEXT), '') ||
          COALESCE(CAST(lpep_dropoff_datetime AS TEXT), '') ||
          COALESCE(PULocationID, '') ||
          COALESCE(DOLocationID, '') ||
          COALESCE(CAST(fare_amount AS TEXT), '') ||
          COALESCE(CAST(trip_distance AS TEXT), '')
        ),
        filename = '{{render(vars.file)}}';

  - id: green_merge_data
    type: io.kestra.plugin.jdbc.postgresql.Queries
    sql: |
      MERGE INTO {{render(vars.table)}} AS T
      USING {{render(vars.staging_table)}} AS S
      ON T.unique_row_id = S.unique_row_id
      WHEN NOT MATCHED THEN
        INSERT (unique_row_id, filename, VendorID, lpep_pickup_datetime, lpep_dropoff_datetime, store_and_fwd_flag, RateCodeID, PULocationID, DOLocationID, passenger_count, trip_distance, fare_amount, extra, mta_tax, tip_amount, tolls_amount, ehail_fee, improvement_surcharge, total_amount, payment_type, trip_type, congestion_surcharge) VALUES (S.unique_row_id, S.filename, S.VendorID, S.lpep_pickup_datetime, S.lpep_dropoff_datetime, S.store_and_fwd_flag, S.RateCodeID, S.PULocationID, S.DOLocationID, S.passenger_count, S.trip_distance, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount, S.ehail_fee, S.improvement_surcharge, S.total_amount, S.payment_type, S.trip_type, S.congestion_surcharge)

pluginDefaults:
  - type: io.kestra.plugin.jdbc.postgresql
    values:
      url: jdbc:postgresql://host.docker.internal:5432/kestra
      username: kestra
      password: k3str4